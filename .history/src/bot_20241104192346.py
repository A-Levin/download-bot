import os
import logging
from aiogram import Bot, Dispatcher
from aiogram.types import Message, FSInputFile
from aiogram.filters import Command
from dotenv import load_dotenv
import yt_dlp
import asyncio

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
API_TOKEN = os.getenv('API_TOKEN')
if not API_TOKEN:
    raise ValueError("API_TOKEN not found in environment variables")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ yt-dlp
ydl_opts = {
    'format': 'best',
    'progress_hooks': [],
}

# –î–æ–±–∞–≤–∏–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è URL –≤–∏–¥–µ–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_video_urls = {}

@dp.message(Command("start"))
async def send_welcome(message: Message):
    await message.reply(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ —Å YouTube.\n"
        "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ, –∏ —è –ø–æ–∫–∞–∂—É –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è.\n"
        "‚ö†Ô∏è –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: —Ñ–∞–π–ª—ã –¥–æ 50MB (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ Telegram)."
    )

@dp.message(lambda message: 'youtube.com' in message.text or 'youtu.be' in message.text)
async def get_formats(message: Message):
    try:
        status_message = await message.reply("–ü–æ–ª—É—á–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ...")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º URL –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_video_urls[message.from_user.id] = message.text
        
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            info = ydl.extract_info(message.text, download=False)
            
        available_formats = []
        unavailable_formats = []
        
        for f in info['formats']:
            if 'filesize' in f and f['filesize']:
                size_mb = f['filesize'] / (1024 * 1024)
                format_info = (
                    f"üìπ –§–æ—Ä–º–∞—Ç #{f['format_id']}\n"
                    f"–†–∞—Å—à–∏—Ä–µ–Ω–∏–µ: {f['ext']}\n"
                    f"–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ: {f.get('resolution', 'N/A')}\n"
                    f"–†–∞–∑–º–µ—Ä: {size_mb:.1f}MB\n"
                    f"üëâ /download_{f['format_id']}"
                )
                
                if size_mb <= 50:
                    available_formats.append(format_info)
                else:
                    unavailable_formats.append(format_info)
        
        response = "üé• –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:\n\n"
        response += "\n\n".join(available_formats)
        
        if unavailable_formats:
            response += "\n\n‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã (>50MB):\n\n"
            response += "\n\n".join(unavailable_formats)
        
        await status_message.edit_text(response)
        
    except Exception as e:
        logger.error(f"Error processing YouTube link: {e}")
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Å—ã–ª–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –≤–∏–¥–µ–æ.")

@dp.message(lambda message: message.text and message.text.startswith('/download_'))
async def download_video(message: Message):
    try:
        format_id = message.text.replace('/download_', '')
        logger.info(f"Download requested for format_id: {format_id}")
        
        if not message.from_user.id in user_video_urls:
            logger.warning(f"No video URL found for user {message.from_user.id}")
            await message.reply("–°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ.")
            return
            
        video_url = user_video_urls[message.from_user.id]
        logger.info(f"Found video URL for user {message.from_user.id}: {video_url}")
        
        status_message = await message.reply("–ù–∞—á–∏–Ω–∞—é –∑–∞–≥—Ä—É–∑–∫—É...")
        logger.info("Status message sent")
        
        def progress_hook(d):
            if d['status'] == 'downloading':
                try:
                    progress = float(d['downloaded_bytes']) / float(d['total_bytes']) * 100
                    downloaded_mb = d['downloaded_bytes'] / (1024*1024)
                    total_mb = d['total_bytes'] / (1024*1024)
                    speed = d.get('speed', 0) / (1024*1024)  # Speed in MB/s
                    logger.info(f"Download progress: {progress:.1f}% ({downloaded_mb:.1f}MB/{total_mb:.1f}MB) Speed: {speed:.1f}MB/s")
                    if progress % 10 < 1:  # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 10%
                        asyncio.create_task(status_message.edit_text(
                            f"–ó–∞–≥—Ä—É–∑–∫–∞: {progress:.1f}%\n"
                            f"–°–∫–∞—á–∞–Ω–æ: {downloaded_mb:.1f}MB –∏–∑ {total_mb:.1f}MB\n"
                            f"–°–∫–æ—Ä–æ—Å—Ç—å: {speed:.1f}MB/s"
                        ))
                except Exception as e:
                    logger.error(f"Error in progress hook: {e}", exc_info=True)

        download_opts = {
            'format': format_id,
            'progress_hooks': [progress_hook],
            'outtmpl': '%(title)s.%(ext)s',
            'quiet': False,
        }
        
        logger.info(f"Starting download with options: {download_opts}")
        
        with yt_dlp.YoutubeDL(download_opts) as ydl:
            logger.info("Extracting video info...")
            info = ydl.extract_info(video_url, download=True)
            filename = ydl.prepare_filename(info)
            logger.info(f"Download completed. Filename: {filename}")
            logger.debug(f"Video info: {info}")
        
        if not os.path.exists(filename):
            logger.error(f"File not found after download: {filename}")
            raise FileNotFoundError(f"Downloaded file not found: {filename}")
        
        file_size = os.path.getsize(filename)
        logger.info(f"File size: {file_size / (1024*1024):.2f} MB")
        
        if file_size > 50 * 1024 * 1024:
            logger.warning(f"File too large ({file_size / (1024*1024):.2f} MB) for Telegram upload")
            await status_message.edit_text("–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ—Ä–µ–∑ Telegram (>50MB). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Ñ–æ—Ä–º–∞—Ç —Å –º–µ–Ω—å—à–∏–º –∫–∞—á–µ—Å—Ç–≤–æ–º.")
            os.remove(filename)
            logger.info(f"Large file {filename} removed")
            return
            
        await status_message.edit_text("–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û—Ç–ø—Ä–∞–≤–ª—è—é —Ñ–∞–π–ª...")
        logger.info("Starting file upload to Telegram")
        
        try:
            logger.info("Preparing to send video")
            video = FSInputFile(filename)
            
            await bot.send_video(
                chat_id=message.chat.id,
                video=video,
                caption="–í–æ—Ç –≤–∞—à–µ –≤–∏–¥–µ–æ!"
            )
            logger.info("Video successfully sent to Telegram")
            
            await status_message.edit_text("–í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
            
        except Exception as e:
            logger.error(f"Error sending video: {str(e)}", exc_info=True)
            await message.reply(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∏–¥–µ–æ: {str(e)}")
            raise
        finally:
            try:
                os.remove(filename)
                logger.info(f"File {filename} removed after processing")
            except Exception as e:
                logger.error(f"Error removing file {filename}: {str(e)}", exc_info=True)
        
    except Exception as e:
        logger.error(f"Error in download_video: {str(e)}", exc_info=True)
        await message.reply(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Ñ–æ—Ä–º–∞—Ç.\n–û—à–∏–±–∫–∞: {str(e)}")

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
